name: Build and Test DotNet Sample

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  NUGET_REPO_NAME: "alex-nuget"

jobs:
  build:
    runs-on: ubuntu-latest


    steps:
    # Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v4

    # set up.NET SDK
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x 

    # This action sets up the JFrog CLI with the Artifactory URL and access token     
    - uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ vars.JFROG_URL }}
        JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}


    # This command adds a new server configuration to the JFrog CLI, as an alternative for using the setup-jfrog-cli action    
    - run: |
        export SERVER_ID="test"
        # export NUGET_REPO_NAME="alex-nuget"
        jf c add $SERVER_ID --url=${{ secrets.JFROG_URL}} --access-token=${{ secrets.ARTIFACTORY_ACCESS_TOKEN }} --interactive=false
        jf c use $SERVER_ID
        jf c show
        jf rt ping
        jf dotnetc --repo-resolve="${{ env.NUGET_REPO_NAME }}"  --server-id-resolve=$SERVER_ID
    # Restore Dependencies from Artifactory
    - name: Restore Dependencies from Artifactory
      run: |
        jf rt dotnet restore dotnet-sample/dotnet-sample.sln \
          --build-name="DotNet-Sample-Build" \
          --build-number="${{ github.run_id }}"
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1

    # Build Project
    - name: Build Project
      run: |
        jf rt dotnet build dotnet-sample/dotnet-sample.sln \
          --no-restore \
          --build-name="DotNet-Sample-Build" \
          --build-number="${{ github.run_id }}"
        
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1

    # Run Tests
    - name: Run Tests
      run: dotnet test dotnet-sample/dotnet-sample.sln --no-build

    # Publish Artifacts
    - name: Publish Artifacts
      run: |
        dotnet publish dotnet-sample/dotnet-sample.sln \
          --output ./output
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1

    # Upload Artifacts to Artifactory
    - name: Upload Artifacts to Artifactory
      run: |
        jf rt u "dotnet-sample/bin/Release/*.nupkg" \
          "${{ env.NUGET_REPO_NAME }}/dotnet-sample" \
          --build-name="DotNet-Sample-Build" \
          --build-number="${{ github.run_id }}"
    # Publish Build Info to Artifactory
    - name: Publish Build Info to Artifactory
      run: |
        jf rt build-publish "DotNet-Sample-Build" "${{ github.run_id }}"
        jf bs DotNet-Sample-Build "${{ github.run_id }}"   --fail=false

    # Go Project Build
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'

    - name: Build Go Project with JFrog CLI
      run: |
        jf goc --repo-resolve="alex-go" --server-id-resolve=$SERVER_ID
        jf rt go build go-sample/main.go --build-name="Go-Sample-Build" --build-number="${{ github.run_id }}"

    - name: Publish Go Build Info to Artifactory
      run: |
        jf rt build-publish "Go-Sample-Build" "${{ github.run_id }}"
        jf bs Go-Sample-Build "${{ github.run_id }}" --fail=false

    # Build Summary
    - name: Build Summary
      if: always()
      run: |
        echo "## Build Summary" > $GITHUB_STEP_SUMMARY
        echo "### DotNet Build" >> $GITHUB_STEP_SUMMARY
        if [ ${{ steps.build.outcome }} = 'success' ]; then
          echo ":white_check_mark: DotNet build succeeded" >> $GITHUB_STEP_SUMMARY
        else
          echo ":x: DotNet build failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "### Go Build" >> $GITHUB_STEP_SUMMARY
        if [ ${{ steps.Build_Go_Project_with_JFrog_CLI.outcome }} = 'success' ]; then
          echo ":white_check_mark: Go build succeeded" >> $GITHUB_STEP_SUMMARY
        else
          echo ":x: Go build failed" >> $GITHUB_STEP_SUMMARY
        fi

