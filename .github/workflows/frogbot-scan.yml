name: "Frogbot Security Scan"

on:
  pull_request_target: 
    types: [opened, synchronize] # Triggers scan-pr flow for every opened/updated pull request
  push: # Triggers scan-repo flow for every push to the specified branches
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"   # The repository will be scanned once a day at 00:00 GMT.
  workflow_dispatch: # The repository will be scanned on demand

permissions:
  pull-requests: write
  contents: write
  security-events: write
  # [Mandatory If using OIDC authentication protocol instead of JF_ACCESS_TOKEN]
  # id-token: write

jobs:
  frogbot-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # The repository scanning will be triggered periodically on the following branches.
        branch: ["main"]
    steps:
      - uses: jfrog/frogbot@v2
        # [Mandatory if using OIDC authentication protocol instead of JF_ACCESS_TOKEN]
        # Insert to oidc-provider-name the 'Provider Name' defined in the OIDC integration configured in the JPD
        # with:
        #   oidc-provider-name: ""
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JF_GIT_BASE_BRANCH: ${{ matrix.branch }}    # For repository scan action

    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install JFrog CLI
      run: |
        curl -fLg "https://releases.jfrog.io/artifactory/jfrog-releases/installers/jfrog-cli/v2/[RELEASE]/jfrog-cli-linux-amd64" -o jfrog
        chmod +x jfrog
        sudo mv jfrog /usr/local/bin/
        
    - name: Configure JFrog credentials
      env:
        JF_URL: ${{ secrets.JF_URL }}
        JF_USER: ${{ secrets.JF_USER }}
        JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
      run: |
        jf c add --url $JF_URL --user $JF_USER --password $JF_PASSWORD --interactive=false
        
    - name: Run Frogbot scan
      env:
        JF_PROJECT_KEY: ${{ secrets.JF_PROJECT_KEY }}
        JF_WATCHES: ${{ secrets.JF_WATCHES }}
        JF_FROGBOT_DEBUG: "true"
      run: |
        jf frogbot scan \
          --project-key $JF_PROJECT_KEY \
          --watches $JF_WATCHES \
          --fail-on-severity High \
          --include-all-vulnerabilities \
          --output-format table
          
    - name: Upload scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frogbot-scan-results
        path: |
          frogbot-scan-results/
          *.log
        retention-days: 30
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const resultsPath = 'frogbot-scan-results/scan-results.txt';
            if (fs.existsSync(resultsPath)) {
              const results = fs.readFileSync(resultsPath, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîç Frogbot Security Scan Results\n\n\`\`\`\n${results}\n\`\`\``
              });
            }
          } catch (error) {
            console.log('No scan results found to comment');
          } 